{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hsson\\\\IdeaProjects\\\\APITest\\\\gpt-chat-app\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport ChatMessage from \"./ChatMessage\";\nimport ChatInput from \"./ChatInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const addMessage = (message, isUser) => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      isUser\n    }]);\n  };\n  const handleSubmit = async message => {\n    // 사용자 메시지를 추가합니다.\n    addMessage(message, true);\n    try {\n      // 백엔드 서버와 통신하여 GPT의 응답을 받습니다.\n      const response = await axios.post(\"http://localhost:8080/ask\", {\n        prompt: message\n      });\n\n      // GPT로부터 받은 응답을 채팅창에 추가합니다.\n      if (response.data) {\n        addMessage(response.data, false);\n      }\n    } catch (error) {\n      console.error(\"Error fetching GPT response:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: message.text,\n        isUser: message.isUser\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"dxxfFX7fiXmC0h9Fk+B7I5VonqM=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","axios","ChatMessage","ChatInput","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","addMessage","message","isUser","prevMessages","text","handleSubmit","response","post","prompt","data","error","console","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","_c","$RefreshReg$"],"sources":["C:/Users/hsson/IdeaProjects/APITest/gpt-chat-app/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport ChatInput from \"./ChatInput\";\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  const addMessage = (message, isUser) => {\r\n    setMessages((prevMessages) => [...prevMessages, { text: message, isUser }]);\r\n  };\r\n\r\n  const handleSubmit = async (message) => {\r\n    // 사용자 메시지를 추가합니다.\r\n    addMessage(message, true);\r\n\r\n    try {\r\n      // 백엔드 서버와 통신하여 GPT의 응답을 받습니다.\r\n      const response = await axios.post(\"http://localhost:8080/ask\", {\r\n        prompt: message,\r\n      });\r\n\r\n      // GPT로부터 받은 응답을 채팅창에 추가합니다.\r\n      if (response.data) {\r\n        addMessage(response.data, false);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching GPT response:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={index}\r\n            message={message.text}\r\n            isUser={message.isUser}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <ChatInput onSubmit={handleSubmit} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMU,UAAU,GAAGA,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCH,WAAW,CAAEI,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAE;MAAEC,IAAI,EAAEH,OAAO;MAAEC;IAAO,CAAC,CAAC,CAAC;EAC7E,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOJ,OAAO,IAAK;IACtC;IACAD,UAAU,CAACC,OAAO,EAAE,IAAI,CAAC;IAEzB,IAAI;MACF;MACA,MAAMK,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,2BAA2B,EAAE;QAC7DC,MAAM,EAAEP;MACV,CAAC,CAAC;;MAEF;MACA,IAAIK,QAAQ,CAACG,IAAI,EAAE;QACjBT,UAAU,CAACM,QAAQ,CAACG,IAAI,EAAE,KAAK,CAAC;MAClC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,oBACEf,OAAA;IAAKiB,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1BlB,OAAA;MAAKiB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3Bf,QAAQ,CAACgB,GAAG,CAAC,CAACb,OAAO,EAAEc,KAAK,kBAC3BpB,OAAA,CAACH,WAAW;QAEVS,OAAO,EAAEA,OAAO,CAACG,IAAK;QACtBF,MAAM,EAAED,OAAO,CAACC;MAAO,GAFlBa,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENxB,OAAA,CAACF,SAAS;MAAC2B,QAAQ,EAAEf;IAAa;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClC,CAAC;AAEV,CAAC;AAACtB,EAAA,CAzCID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA2ChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
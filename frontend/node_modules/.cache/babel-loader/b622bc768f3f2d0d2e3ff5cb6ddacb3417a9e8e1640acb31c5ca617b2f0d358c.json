{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/Signup.js\n// import '../styles/Signup.css'; \nimport React from 'react';\nimport '../styles/Signup.css';\nimport '../styles/Message.css';\n// import SurveyForm from './SurveyForm';   \nimport { useNavigate } from 'react-router-dom';\nfunction Signup(onHomeClick) {\n  _s();\n  //navigate 변수\n  const navigate = useNavigate();\n  const [page, setPage] = React.useState(null);\n\n  // 폼 리셋 함수\n  const resetForm = () => {\n    setId('');\n    setPassword('');\n    setUserName('');\n    setBirthDate('');\n    setPhoneNum('');\n    setProfileImagePath('');\n  };\n\n  //변수\n  const [id, setId] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [userName, setUserName] = React.useState('');\n  const [birthDate, setBirthDate] = React.useState('');\n  const [phoneNum, setPhoneNum] = React.useState('');\n  const [profileImagePath, setProfileImagePath] = React.useState(null);\n\n  //handleChange\n  const handleIdChange = event => setId(event.target.value);\n  const handlePasswordChange = event => setPassword(event.target.value);\n  const handleUserNameChange = event => setUserName(event.target.value);\n  const handleBirthDateChange = event => setBirthDate(event.target.value);\n  const handlePhoneNumChange = event => setPhoneNum(event.target.value);\n  const handleProfileImagePathChange = event => setProfileImagePath(event.target.files[0]);\n  //  const handleEmailChange = (event) => setEmail(event.target.value);\n\n  //handleSubmit\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // // 입력 데이터 객체 생성\n    // const data = { id, password, userName, birthDate, phoneNum };\n\n    // FormData 객체 생성\n    const formData = new FormData();\n    formData.append('id', id);\n    formData.append('password', password);\n    formData.append('userName', userName);\n    formData.append('birthDate', birthDate);\n    formData.append('phoneNum', phoneNum);\n    formData.append('profileImagePath', profileImagePath); // 프로필 이미지 추가\n    try {\n      // 서버로 POST 요청 보내기\n      const response = await fetch('/signUp', {\n        method: 'POST',\n        // headers: {\n        //   'Content-Type': 'application/json',\n        // },\n        body: formData\n      });\n      if (response.ok) {\n        // 회원가입 성공\n        window.alert('회원가입이 완료되었습니다!');\n        navigate('/'); // 메인 페이지로 이동\n      } else {\n        // 실패 응답 처리\n        const errorData = await response.json();\n        if (errorData.error === 'DuplicatedId') {\n          window.alert('이미 존재하는 아이디입니다!');\n          resetForm(); // 폼 초기화\n        } else {\n          window.alert('회원가입 중 문제가 발생했습니다.');\n        }\n      }\n    } catch (error) {\n      // 네트워크 오류 처리\n      console.error('Error occurred:', error);\n      window.alert('서버와 통신 중 문제가 발생했습니다. 다시 시도해주세요.');\n    }\n  };\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'signup-container'\n  }, /*#__PURE__*/React.createElement('h2', null, '회원가입'), /*#__PURE__*/React.createElement('form', {\n    className: 'signup-form',\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/React.createElement('label', null, '아이디'), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'id',\n    value: id,\n    onChange: handleIdChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('div', {\n    class: 'idMessage'\n  }, '6자 이상 16자 이하 입력'), /*#__PURE__*/React.createElement('label', null, '비밀번호'), /*#__PURE__*/React.createElement('input', {\n    type: 'password',\n    name: 'password',\n    value: password,\n    onChange: handlePasswordChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('div', {\n    class: 'pwdMessage'\n  }, '8자 이상 16자 이하의 영문,숫자,특수기호'), /*#__PURE__*/React.createElement('label', null, '이름 '), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'userName',\n    value: userName,\n    onChange: handleUserNameChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '생년월일 '), /*#__PURE__*/React.createElement('input', {\n    type: 'date',\n    name: 'birthDate',\n    value: birthDate,\n    onChange: handleBirthDateChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '휴대폰 번호 '), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'phoneNum',\n    value: phoneNum,\n    onChange: handlePhoneNumChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '프로필 이미지'), /*#__PURE__*/React.createElement('input', {\n    type: 'file',\n    name: 'profileImagePath',\n    onChange: handleProfileImagePathChange,\n    required: true // 프로필 이미지를 필수로 설정\n  }), /*#__PURE__*/React.createElement('button', {\n    type: 'submit'\n  }, '회원가입')));\n}\n_s(Signup, \"luwBRd8Z8UXqorYHZ8wYGT7Kpgs=\", false, function () {\n  return [useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useNavigate","Signup","onHomeClick","_s","navigate","page","setPage","useState","resetForm","setId","setPassword","setUserName","setBirthDate","setPhoneNum","setProfileImagePath","id","password","userName","birthDate","phoneNum","profileImagePath","handleIdChange","event","target","value","handlePasswordChange","handleUserNameChange","handleBirthDateChange","handlePhoneNumChange","handleProfileImagePathChange","files","handleSubmit","preventDefault","formData","FormData","append","response","fetch","method","body","ok","window","alert","errorData","json","error","console","createElement","className","onSubmit","type","name","onChange","required","class","_c","$RefreshReg$"],"sources":["/Users/jinmyeonghun/Desktop/3-2/공소/2024-2-CSC4004-6-Hotsix/frontend/src/components/Signup.js"],"sourcesContent":["// src/components/Signup.js\n// import '../styles/Signup.css'; \nimport React from 'react';\nimport '../styles/Signup.css';\nimport '../styles/Message.css';\n// import SurveyForm from './SurveyForm';   \nimport { useNavigate } from 'react-router-dom';\n\nfunction Signup(onHomeClick) {\n\n    //navigate 변수\n    const navigate = useNavigate();\n\n    const [page, setPage] = React.useState(null);\n\n    // 폼 리셋 함수\n      const resetForm = () => {\n          setId('');\n          setPassword('');\n          setUserName('');\n          setBirthDate('');\n          setPhoneNum('');\n          setProfileImagePath('');\n      };\n\n  //변수\n  const [id, setId] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [userName, setUserName] = React.useState('');\n  const [birthDate, setBirthDate] = React.useState('');\n  const [phoneNum, setPhoneNum] = React.useState('');\n  const [profileImagePath, setProfileImagePath] = React.useState(null);\n\n  //handleChange\n  const handleIdChange = (event) => setId(event.target.value);\n  const handlePasswordChange = (event) => setPassword(event.target.value);\n  const handleUserNameChange = (event) => setUserName(event.target.value);\n  const handleBirthDateChange = (event) => setBirthDate(event.target.value);\n  const handlePhoneNumChange = (event) => setPhoneNum(event.target.value);\n  const handleProfileImagePathChange = (event) => setProfileImagePath(event.target.files[0]);\n//  const handleEmailChange = (event) => setEmail(event.target.value);\n\n  //handleSubmit\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n  \n    // // 입력 데이터 객체 생성\n    // const data = { id, password, userName, birthDate, phoneNum };\n  \n    // FormData 객체 생성\n    const formData = new FormData();\n    formData.append('id', id);\n    formData.append('password', password);\n    formData.append('userName', userName);\n    formData.append('birthDate', birthDate);\n    formData.append('phoneNum', phoneNum);\n    formData.append('profileImagePath', profileImagePath); // 프로필 이미지 추가\n    try {\n      // 서버로 POST 요청 보내기\n      const response = await fetch('/signUp', {\n        method: 'POST',\n        // headers: {\n        //   'Content-Type': 'application/json',\n        // },\n        body: formData, \n      });\n  \n      if (response.ok) {\n        // 회원가입 성공\n        window.alert('회원가입이 완료되었습니다!');\n        navigate('/');// 메인 페이지로 이동\n      } else {\n        // 실패 응답 처리\n        const errorData = await response.json();\n        if (errorData.error === 'DuplicatedId') {\n          window.alert('이미 존재하는 아이디입니다!');\n          resetForm(); // 폼 초기화\n        } else {\n          window.alert('회원가입 중 문제가 발생했습니다.');\n        }\n      }\n    } catch (error) {\n      // 네트워크 오류 처리\n      console.error('Error occurred:', error);\n      window.alert('서버와 통신 중 문제가 발생했습니다. 다시 시도해주세요.');\n    }\n  };\n\n\n   return (\n\n          React.createElement('div', { className: 'signup-container' },\n              React.createElement('h2', null, '회원가입'),\n              React.createElement('form', { className: 'signup-form', onSubmit: handleSubmit },\n                  React.createElement('label', null, '아이디'),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'id',\n                      value: id,\n                      onChange: handleIdChange,\n                      required: true\n                  }),\n                  React.createElement('div',{\n                    class : 'idMessage'\n                  },'6자 이상 16자 이하 입력'),\n                  React.createElement('label', null, '비밀번호'),\n                  React.createElement('input', {\n                      type: 'password',\n                      name: 'password',\n                      value: password,\n                      onChange: handlePasswordChange,\n                      required: true\n                  }),\n                  React.createElement('div',{\n                  class : 'pwdMessage'\n                },'8자 이상 16자 이하의 영문,숫자,특수기호'),\n\n                  React.createElement('label', null, '이름 '),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'userName',\n                      value: userName,\n                      onChange: handleUserNameChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '생년월일 '),\n                  React.createElement('input', {\n                      type: 'date',\n                      name: 'birthDate',\n                      value: birthDate,\n                      onChange: handleBirthDateChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '휴대폰 번호 '),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'phoneNum',\n                      value: phoneNum,\n                      onChange: handlePhoneNumChange,\n                      required: true\n                  }),\n                  React.createElement('label', null, '프로필 이미지'),\n                  React.createElement('input', {\n                      type: 'file',\n                      name: 'profileImagePath',\n                      onChange: handleProfileImagePathChange,\n                      required: true // 프로필 이미지를 필수로 설정\n                    }),\n                  React.createElement('button', { type: 'submit' }, '회원가입')\n       )\n  )\n);\n}\n  \n  export default Signup;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
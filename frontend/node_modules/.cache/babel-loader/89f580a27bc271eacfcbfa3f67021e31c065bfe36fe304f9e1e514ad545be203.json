{"ast":null,"code":"// src/components/Login.js\nimport React from'react';import{useNavigate}from'react-router-dom';import'../styles/Login.css';function Login(){const navigate=useNavigate();// 폼 리셋 함수 (비밀번호만 비우기로 수정)\nconst resetForm=()=>{// setId('');\nsetPassword('');};//변수\nconst[id,setId]=React.useState('');const[password,setPassword]=React.useState('');//handleChange\nconst handleIdChange=event=>setId(event.target.value);const handlePasswordChange=event=>setPassword(event.target.value);//handleSubmit\nconst handleSubmit=async event=>{event.preventDefault();// const data = { id,password };\ntry{const response=await fetch('/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({id,password})});// 응답 상태 확인\nif(!response.ok){const errorData=await response.json();if(errorData.error===\"ID does not exist\"||errorData.error===\"Invalid Password\"){window.alert(\"아이디 또는 비밀번호가 틀렸습니다.\");}else{console.error(\"Error:\",errorData.error);window.alert(\"Error: \"+errorData.error);}resetForm();return;}else{// 성공 처리\nconst responseData=await response.json();sessionStorage.setItem(\"token\",responseData.token);// JWT 저장\nsessionStorage.setItem(\"ID\",id);//Id 저장\nif(responseData.isFirstLogin==\"true\"){navigate('/survey');}window.location.href='/';}}catch(error){console.error(\"Unexpected error:\",error);window.alert(\"Unexpected error occurred. Please try again.\");}};return/*#__PURE__*/React.createElement('div',{className:'login-container',onSubmit:handleSubmit},/*#__PURE__*/React.createElement('h2',null,'로그인'),/*#__PURE__*/React.createElement('form',{className:'login-form'},/*#__PURE__*/React.createElement('label',null,'아이디 '),/*#__PURE__*/React.createElement('input',{type:'text',name:'id',value:id,onChange:handleIdChange,required:true}),/*#__PURE__*/React.createElement('label',null,'비밀번호 '),/*#__PURE__*/React.createElement('input',{type:'password',name:'password',value:password,onChange:handlePasswordChange,required:true}),/*#__PURE__*/React.createElement('button',{type:'submit'},'로그인')));}export default Login;","map":{"version":3,"names":["React","useNavigate","Login","navigate","resetForm","setPassword","id","setId","useState","password","handleIdChange","event","target","value","handlePasswordChange","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","error","window","alert","console","responseData","sessionStorage","setItem","token","isFirstLogin","location","href","createElement","className","onSubmit","type","name","onChange","required"],"sources":["/Users/jinmyeonghun/Desktop/3-2/공소/2024-2-CSC4004-6-Hotsix/frontend/src/components/Login.js"],"sourcesContent":["// src/components/Login.js\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/Login.css'; \n\nfunction Login() {\n\n  const navigate = useNavigate();\n  // 폼 리셋 함수 (비밀번호만 비우기로 수정)\n  const resetForm = () => {\n      // setId('');\n      setPassword('');\n  };\n\n  //변수\n  const [id, setId] = React.useState('');\n  const [password, setPassword] = React.useState('');\n\n  //handleChange\n  const handleIdChange = (event) => setId(event.target.value);\n  const handlePasswordChange = (event) => setPassword(event.target.value);\n\n  //handleSubmit\n  const handleSubmit = async (event) => {\n      event.preventDefault();\n      // const data = { id,password };\n\n      try {\n          const response = await fetch('/login', {\n              method: 'POST',\n              headers: {'Content-Type': 'application/json'},\n              body: JSON.stringify({id, password}),\n          });\n          // 응답 상태 확인\n          if (!response.ok) {\n              const errorData = await response.json();\n              if (errorData.error === \"ID does not exist\" || errorData.error === \"Invalid Password\") {\n                  window.alert(\"아이디 또는 비밀번호가 틀렸습니다.\");\n              } else {\n                  console.error(\"Error:\", errorData.error);\n                  window.alert(\"Error: \" + errorData.error);\n              }\n              resetForm();\n              return;\n          }\n          else {\n              // 성공 처리\n              const responseData = await response.json();\n              sessionStorage.setItem(\"token\", responseData.token); // JWT 저장\n              sessionStorage.setItem(\"ID\",id);  //Id 저장\n              \n              if(responseData.isFirstLogin == \"true\"){\n                  navigate('/survey');\n              }\n              window.location.href = '/';\n          }\n      }\n      catch(error) {\n          console.error(\"Unexpected error:\", error);\n          window.alert(\"Unexpected error occurred. Please try again.\");\n      }\n  }\nreturn (\n  React.createElement('div', { className: 'login-container',onSubmit: handleSubmit },\n    React.createElement('h2', null, '로그인'),\n    React.createElement('form', { className: 'login-form' },\n        React.createElement('label', null, '아이디 '),\n        React.createElement('input', {\n            type: 'text',\n            name: 'id',\n            value: id,\n            onChange: handleIdChange,\n            required: true\n        }),\n        React.createElement('label', null, '비밀번호 '),\n        React.createElement('input', {\n            type: 'password',\n            name: 'password',\n            value: password,\n            onChange: handlePasswordChange,\n            required: true\n        }),\n      React.createElement('button', { type: 'submit' }, '로그인')\n    )\n  )\n);\n}\n  \n  export default Login;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
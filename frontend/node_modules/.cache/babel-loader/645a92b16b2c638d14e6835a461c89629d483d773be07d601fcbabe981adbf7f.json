{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/Signup.js\n// import '../styles/Signup.css'; \nimport React from 'react';\nimport '../styles/Signup.css';\nfunction Signup() {\n  _s();\n  const [page, setPage] = React.useState(null);\n  // 폼 리셋 함수\n  const resetForm = () => {\n    setId('');\n    setPassword('');\n    setUserName('');\n    setBirthDate('');\n    setPhoneNum('');\n  };\n\n  //변수\n  const [id, setId] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [userName, setUserName] = React.useState('');\n  const [birthDate, setBirthDate] = React.useState('');\n  const [phoneNum, setPhoneNum] = React.useState('');\n  //  const [email, setEmail] = React.useState('');\n\n  //handleChange\n  const handleIdChange = event => setId(event.target.value);\n  const handlePasswordChange = event => setPassword(event.target.value);\n  const handleUserNameChange = event => setUserName(event.target.value);\n  const handleBirthDateChange = event => setBirthDate(event.target.value);\n  const handlePhoneNumChange = event => setPhoneNum(event.target.value);\n  //  const handleEmailChange = (event) => setEmail(event.target.value);\n\n  //handleSubmit\n  const handleSubmit = event => {\n    event.preventDefault();\n    const data = {\n      id,\n      password,\n      userName,\n      birthDate,\n      phoneNum\n    };\n\n    // 서버의 특정 URL로 POST 요청 보내기\n    fetch('/signUp', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(data) // 데이터를 JSON 문자열로 변환하여 전송\n    }).then(response => {\n      if (response.ok) {\n        window.alert(\"회원가입이 완료되었습니다!\");\n        //가입 성공 응답시 설문조사 페이지로 이동\n        setPage('survey');\n      } else {\n        const errorData = response.json();\n        if (errorData.error === \"DuplicatedId\") {\n          window.alert(\"이미 존재하는 아이디입니다!\");\n          // 가입 실패 시 현재 페이지 새로고침\n          resetForm();\n        }\n      }\n    });\n  };\n  return /*#__PURE__*/React.createElement('div', {\n    className: 'signup-container'\n  }, /*#__PURE__*/React.createElement('h2', null, '회원가입'), /*#__PURE__*/React.createElement('form', {\n    className: 'signup-form',\n    onSubmit: handleSubmit\n  }, /*#__PURE__*/React.createElement('label', null, 'ID: '), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'id',\n    value: id,\n    onChange: handleIdChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '비밀번호: '), /*#__PURE__*/React.createElement('input', {\n    type: 'password',\n    name: 'password',\n    value: password,\n    onChange: handlePasswordChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '이름: '), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'userName',\n    value: userName,\n    onChange: handleUserNameChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '생년월일: '), /*#__PURE__*/React.createElement('input', {\n    type: 'date',\n    name: 'birthDate',\n    value: birthDate,\n    onChange: handleBirthDateChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('label', null, '휴대폰 번호: '), /*#__PURE__*/React.createElement('input', {\n    type: 'text',\n    name: 'phoneNum',\n    value: phoneNum,\n    onChange: handlePhoneNumChange,\n    required: true\n  }), /*#__PURE__*/React.createElement('button', {\n    type: 'submit'\n  }, '회원가입')));\n}\n_s(Signup, \"IHHzhWCC1IiFYVcQwuYK3e3/nwE=\");\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","Signup","_s","page","setPage","useState","resetForm","setId","setPassword","setUserName","setBirthDate","setPhoneNum","id","password","userName","birthDate","phoneNum","handleIdChange","event","target","value","handlePasswordChange","handleUserNameChange","handleBirthDateChange","handlePhoneNumChange","handleSubmit","preventDefault","data","fetch","method","headers","body","JSON","stringify","then","response","ok","window","alert","errorData","json","error","createElement","className","onSubmit","type","name","onChange","required","_c","$RefreshReg$"],"sources":["/Users/jinmyeonghun/Desktop/3-2/공소/2024-2-CSC4004-6-Hotsix/frontend/src/components/Signup.js"],"sourcesContent":["// src/components/Signup.js\n// import '../styles/Signup.css'; \nimport React from 'react';\nimport '../styles/Signup.css';\n\nfunction Signup() {\n    \n    const [page, setPage] = React.useState(null);\n  // 폼 리셋 함수\n      const resetForm = () => {\n          setId('');\n          setPassword('');\n          setUserName('');\n          setBirthDate('');\n          setPhoneNum('');\n      };\n\n  //변수\n  const [id, setId] = React.useState('');\n  const [password, setPassword] = React.useState('');\n  const [userName, setUserName] = React.useState('');\n  const [birthDate, setBirthDate] = React.useState('');\n  const [phoneNum, setPhoneNum] = React.useState('');\n//  const [email, setEmail] = React.useState('');\n\n  //handleChange\n  const handleIdChange = (event) => setId(event.target.value);\n  const handlePasswordChange = (event) => setPassword(event.target.value);\n  const handleUserNameChange = (event) => setUserName(event.target.value);\n  const handleBirthDateChange = (event) => setBirthDate(event.target.value);\n  const handlePhoneNumChange = (event) => setPhoneNum(event.target.value);\n//  const handleEmailChange = (event) => setEmail(event.target.value);\n\n  //handleSubmit\n  const handleSubmit = (event) => {\n  event.preventDefault();\n  const data = { id,password,userName,birthDate,phoneNum };\n\n  // 서버의 특정 URL로 POST 요청 보내기\n  fetch('/signUp', {\n      method: 'POST',\n      headers: {\n          'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data), // 데이터를 JSON 문자열로 변환하여 전송\n      })\n    .then(response => {\n        if (response.ok) {\n            window.alert(\"회원가입이 완료되었습니다!\");\n            //가입 성공 응답시 설문조사 페이지로 이동\n            setPage('survey');\n        }\n         else  {\n            const errorData = response.json();\n            if(errorData.error === \"DuplicatedId\"){\n                window.alert(\"이미 존재하는 아이디입니다!\");\n                // 가입 실패 시 현재 페이지 새로고침\n                resetForm();\n            }\n         }\n    })\n}\n\n   return (\n\n          React.createElement('div', { className: 'signup-container' },\n              React.createElement('h2', null, '회원가입'),\n              React.createElement('form', { className: 'signup-form', onSubmit: handleSubmit },\n                  React.createElement('label', null, 'ID: '),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'id',\n                      value: id,\n                      onChange: handleIdChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '비밀번호: '),\n                  React.createElement('input', {\n                      type: 'password',\n                      name: 'password',\n                      value: password,\n                      onChange: handlePasswordChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '이름: '),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'userName',\n                      value: userName,\n                      onChange: handleUserNameChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '생년월일: '),\n                  React.createElement('input', {\n                      type: 'date',\n                      name: 'birthDate',\n                      value: birthDate,\n                      onChange: handleBirthDateChange,\n                      required: true\n                  }),\n\n                  React.createElement('label', null, '휴대폰 번호: '),\n                  React.createElement('input', {\n                      type: 'text',\n                      name: 'phoneNum',\n                      value: phoneNum,\n                      onChange: handlePhoneNumChange,\n                      required: true\n                  }),\n\n                  React.createElement('button', { type: 'submit' }, '회원가입')\n       )\n  )\n);\n}\n  \n  export default Signup;\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
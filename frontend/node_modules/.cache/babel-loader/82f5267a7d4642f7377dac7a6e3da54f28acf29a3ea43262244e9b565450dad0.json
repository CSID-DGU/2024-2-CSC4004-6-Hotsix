{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"../styles/ContentCarousel.css\";\nimport axios from 'axios';\nfunction ContentCarousel() {\n  _s();\n  const containerRefs = useRef([]);\n  const [gptResponse, setGptResponse] = useState([]);\n  useEffect(() => {\n    const fetchGptResponse = async () => {\n      // 실제 사용자 데이터로 대체하세요\n      const userInfo = {\n        mbti: 'ISFP',\n        location: '서울특별시 중구 퇴계로',\n        budget: '10~20만원',\n        requiredCourse: '카페, 영화',\n        preferredCourse: '산책',\n        activityPreference: '비선호',\n        transportType: '대중교통'\n      };\n      try {\n        const response = await axios.post('http://localhost:8080/ask', userInfo);\n        const responseText = response.data; // 응답 데이터 확인\n        console.log('GPT 응답 원본:', responseText); // 디버깅용\n\n        // GPT 응답 파싱\n        const contentItems = responseText.split(/[\\[\\]]/).filter(item => item.trim() !== '' && item.trim() !== ',').map(item => item.trim());\n        console.log('파싱된 GPT 응답:', contentItems); // 디버깅용\n\n        setGptResponse(contentItems);\n\n        // GPT 응답을 사용하여 sections 상태 업데이트\n        setSections(prevSections => {\n          const newSections = [...prevSections];\n          newSections[0] = {\n            ...newSections[0],\n            items: contentItems.map(item => ({\n              title: item\n            }))\n          };\n          return newSections;\n        });\n      } catch (error) {\n        console.error(\"GPT 응답 가져오는 중 오류 발생:\", error);\n      }\n    };\n    fetchGptResponse();\n  }, []);\n  const [sections, setSections] = useState([{\n    title: \"사용자 맞춤\",\n    items: []\n  }, {\n    title: \"기념일 기념\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `경궁 ${i + 1}`\n    }))\n  }, {\n    title: \"인기 장소\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `드라마 ${i + 1}`\n    }))\n  }, {\n    title: \"계절별\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `애니 ${i + 1}`\n    }))\n  }]);\n\n  //  // GPT 응답을 '사용자 맞춤' 섹션의 items로 설정\n  //  if (gptResponse.length > 0) {\n  //    sections[0].items = gptResponse.map((item) => ({ title: item }));\n  //  }\n  // 스크롤 이동량 설정\n  const scrollAmount = 200; // 예시로 한 번에 200px씩 이동\n\n  const scroll = (direction, index) => {\n    var _container$querySelec;\n    const container = containerRefs.current[index];\n    if (!container) return; // 컨테이너가 없을 경우 대비\n\n    const itemWidth = ((_container$querySelec = container.querySelector(\".carousel-item\")) === null || _container$querySelec === void 0 ? void 0 : _container$querySelec.offsetWidth) || 0;\n    const totalWidth = itemWidth * (sections[index].items.length || 0);\n    if (direction === 'left') {\n      container.scrollLeft -= scrollAmount; // 왼쪽으로 스크롤\n\n      // 처음에 도달하면 끝으로 돌아가도록 설정\n      if (container.scrollLeft < 0) {\n        container.scrollLeft = totalWidth - container.clientWidth; // 끝으로 이동\n      }\n    } else {\n      container.scrollLeft += scrollAmount; // 오른쪽으로 스크롤\n\n      // 끝에 도달하면 처음으로 돌아가도록 설정\n      if (container.scrollLeft >= totalWidth - container.clientWidth) {\n        container.scrollLeft = 0; // 처음으로 돌아감\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(React.Fragment, null, sections.map((section, index) => /*#__PURE__*/React.createElement(\"section\", {\n    className: \"carousel-section\",\n    key: index\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"carousel-title\"\n  }, section.title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"carousel-container\"\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"carousel-button prev\",\n    onClick: () => scroll(\"left\", index)\n  }, \"‹\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"carousel-content\",\n    ref: el => containerRefs.current[index] = el\n  }, section.items.map((item, itemIndex) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"carousel-item\",\n    key: itemIndex\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"content-number\"\n  }, item.title)))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"carousel-button next\",\n    onClick: () => scroll(\"right\", index)\n  }, \"›\")))));\n}\n_s(ContentCarousel, \"KaXp7D1NBNWeEFabHVYyFqJqnnE=\");\n_c = ContentCarousel;\nexport default ContentCarousel;\nvar _c;\n$RefreshReg$(_c, \"ContentCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","axios","ContentCarousel","_s","containerRefs","gptResponse","setGptResponse","fetchGptResponse","userInfo","mbti","location","budget","requiredCourse","preferredCourse","activityPreference","transportType","response","post","responseText","data","console","log","contentItems","split","filter","item","trim","map","setSections","prevSections","newSections","items","title","error","sections","Array","from","length","_","i","scrollAmount","scroll","direction","index","_container$querySelec","container","current","itemWidth","querySelector","offsetWidth","totalWidth","scrollLeft","clientWidth","createElement","Fragment","section","className","key","onClick","ref","el","itemIndex","_c","$RefreshReg$"],"sources":["C:/Users/hsson/IdeaProjects/2024-2-CSC4004-6-Hotsix/frontend/src/components/ContentCarousel.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport \"../styles/ContentCarousel.css\";\r\nimport axios from 'axios';\r\n\r\nfunction ContentCarousel() {\r\n  const containerRefs = useRef([]);\r\n  const [gptResponse, setGptResponse] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n      const fetchGptResponse = async () => {\r\n        // 실제 사용자 데이터로 대체하세요\r\n        const userInfo = {\r\n          mbti: 'ISFP',\r\n          location: '서울특별시 중구 퇴계로',\r\n          budget: '10~20만원',\r\n          requiredCourse: '카페, 영화',\r\n          preferredCourse: '산책',\r\n          activityPreference: '비선호',\r\n          transportType: '대중교통',\r\n        };\r\n\r\n        try {\r\n          const response = await axios.post('http://localhost:8080/ask', userInfo);\r\n          const responseText = response.data; // 응답 데이터 확인\r\n          console.log('GPT 응답 원본:', responseText); // 디버깅용\r\n\r\n          // GPT 응답 파싱\r\n          const contentItems = responseText.split(/[\\[\\]]/).filter(item => item.trim() !== '' && item.trim() !== ',').map(item => item.trim());\r\n          console.log('파싱된 GPT 응답:', contentItems); // 디버깅용\r\n\r\n          setGptResponse(contentItems);\r\n\r\n           // GPT 응답을 사용하여 sections 상태 업데이트\r\n           setSections(prevSections => {\r\n            const newSections = [...prevSections];\r\n            newSections[0] = {\r\n               ...newSections[0],\r\n               items: contentItems.map(item => ({ title: item })),\r\n               };\r\n               return newSections;\r\n            });\r\n            } catch (error) {\r\n                console.error(\"GPT 응답 가져오는 중 오류 발생:\", error);\r\n              }\r\n            };\r\n\r\n      fetchGptResponse();\r\n  }, []);\r\n\r\n  const [sections, setSections] = useState([\r\n    { title: \"사용자 맞춤\", items: [] },\r\n    { title: \"기념일 기념\", items: Array.from({ length: 10 }, (_, i) => ({ title: `경궁 ${i + 1}` })) },\r\n    { title: \"인기 장소\", items: Array.from({ length: 10 }, (_, i) => ({ title: `드라마 ${i + 1}` })) },\r\n    { title: \"계절별\", items: Array.from({ length: 10 }, (_, i) => ({ title: `애니 ${i + 1}` })) },\r\n  ]);\r\n\r\n//  // GPT 응답을 '사용자 맞춤' 섹션의 items로 설정\r\n//  if (gptResponse.length > 0) {\r\n//    sections[0].items = gptResponse.map((item) => ({ title: item }));\r\n//  }\r\n  // 스크롤 이동량 설정\r\n  const scrollAmount = 200; // 예시로 한 번에 200px씩 이동\r\n\r\n  const scroll = (direction, index) => {\r\n    const container = containerRefs.current[index];\r\n    if (!container) return; // 컨테이너가 없을 경우 대비\r\n\r\n     const itemWidth = container.querySelector(\".carousel-item\")?.offsetWidth || 0;\r\n     const totalWidth = itemWidth * (sections[index].items.length || 0);\r\n\r\n    if (direction === 'left') {\r\n      container.scrollLeft -= scrollAmount; // 왼쪽으로 스크롤\r\n\r\n      // 처음에 도달하면 끝으로 돌아가도록 설정\r\n      if (container.scrollLeft < 0) {\r\n        container.scrollLeft = totalWidth - container.clientWidth; // 끝으로 이동\r\n      }\r\n    } else {\r\n      container.scrollLeft += scrollAmount; // 오른쪽으로 스크롤\r\n\r\n      // 끝에 도달하면 처음으로 돌아가도록 설정\r\n      if (container.scrollLeft >= totalWidth - container.clientWidth) {\r\n        container.scrollLeft = 0; // 처음으로 돌아감\r\n      }\r\n    }\r\n  };\r\n\r\n  return React.createElement(\r\n    React.Fragment,\r\n    null,\r\n    sections.map((section, index) =>\r\n      React.createElement(\r\n        \"section\",\r\n        { className: \"carousel-section\", key: index },\r\n        React.createElement(\"h2\", { className: \"carousel-title\" }, section.title),\r\n        React.createElement(\r\n          \"div\",\r\n          { className: \"carousel-container\" },\r\n          React.createElement(\r\n            \"button\",\r\n            {\r\n              className: \"carousel-button prev\",\r\n              onClick: () => scroll(\"left\", index),\r\n            },\r\n            \"‹\"\r\n          ),\r\n          React.createElement(\r\n            \"div\",\r\n            {\r\n              className: \"carousel-content\",\r\n              ref: (el) => (containerRefs.current[index] = el),\r\n            },\r\n            section.items.map((item, itemIndex) =>\r\n              React.createElement(\r\n                \"div\",\r\n                { className: \"carousel-item\", key: itemIndex },\r\n                React.createElement(\"div\", { className: \"content-number\" }, item.title)\r\n              )\r\n            )\r\n          ),\r\n          React.createElement(\r\n            \"button\",\r\n            {\r\n              className: \"carousel-button next\",\r\n              onClick: () => scroll(\"right\", index),\r\n            },\r\n            \"›\"\r\n          )\r\n        )\r\n      )\r\n    )\r\n  );\r\n}\r\n\r\nexport default ContentCarousel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
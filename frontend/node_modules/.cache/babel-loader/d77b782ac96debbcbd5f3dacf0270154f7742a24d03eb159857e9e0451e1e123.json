{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hsson\\\\IdeaProjects\\\\2024-2-CSC4004-6-Hotsix\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\n// src/components/ChatWindow.js\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport ChatMessage from \"./ChatMessage\";\nimport ChatInput from \"./ChatInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatWindow = () => {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [contentSections, setContentSections] = useState([]);\n\n  // 메시지 추가 함수\n  const addMessage = (message, isUser, imageUrl = null) => {\n    setMessages(prevMessages => [...prevMessages, {\n      text: message,\n      isUser,\n      imageUrl\n    }]);\n  };\n\n  // 초기 로드 시 GPT API에 사용자 정보 전송\n  useEffect(() => {\n    const userId = sessionStorage.getItem(\"ID\");\n    if (userId) {\n      // 사용자 정보 가져오기\n      axios.get(`/userNameAndUserProfile/${userId}`).then(response => {\n        const userName = response.data.userName;\n        const userProfile = response.data.profileImagePath;\n\n        // 추가적으로 필요한 사용자 정보가 있다면 가져옵니다.\n        // 예: preferredCourse, transportType 등\n\n        // GPT API에 사용자 정보 전송\n        const userInfo = {\n          MBTI: \"ISFP\",\n          // 실제 사용자 정보로 대체\n          사는곳: \"서울특별시 중구 퇴계로\",\n          // 실제 사용자 정보로 대체\n          예산: \"10~20만원\",\n          // 실제 사용자 정보로 대체\n          필수코스: \"카페, 영화\",\n          // 실제 사용자 정보로 대체\n          선호코스: \"산책\",\n          // 실제 사용자 정보로 대체\n          액티비티선호유무: \"비선호\",\n          // 실제 사용자 정보로 대체\n          교통수단: \"대중교통\" // 실제 사용자 정보로 대체\n        };\n        axios.post(\"http://localhost:8080/ask\", userInfo).then(res => {\n          const gptResponse = res.data.text;\n          // 응답을 각 컨텐츠 섹션에 매핑\n          const courses = gptResponse.split(\"\\n\").filter(line => line.trim() !== \"\");\n          setContentSections(courses);\n        }).catch(error => {\n          console.error(\"Error fetching GPT response:\", error);\n          addMessage(\"Error fetching response from server.\", false);\n        });\n      }).catch(error => {\n        console.error(\"Error fetching user data:\", error);\n      });\n    }\n  }, []);\n  const handleSubmit = async message => {\n    // 사용자 메시지를 추가\n    addMessage(message, true);\n    try {\n      // 백엔드 서버와 통신하여 GPT의 응답을 받음\n      const response = await axios.post(\"http://localhost:8080/ask\", {\n        prompt: message\n      });\n\n      // GPT 응답 처리\n      if (response.data) {\n        const {\n          text,\n          imageUrl\n        } = response.data; // text와 imageUrl을 백엔드에서 받아옴\n        addMessage(text, false, imageUrl); // 메시지와 이미지 추가\n      }\n    } catch (error) {\n      console.error(\"Error fetching GPT response:\", error);\n      addMessage(\"Error fetching response from server.\", false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-window\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: message.text,\n        isUser: message.isUser,\n        imageUrl: message.imageUrl // 이미지 URL 전달\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatInput, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-sections\",\n      children: contentSections.map((course, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `content-item content-${index + 1}`,\n        children: course\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatWindow, \"u5pU74OgQHiH1irfk5vp6VMfjdI=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","axios","ChatMessage","ChatInput","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","contentSections","setContentSections","addMessage","message","isUser","imageUrl","prevMessages","text","userId","sessionStorage","getItem","get","then","response","userName","data","userProfile","profileImagePath","userInfo","MBTI","사는곳","예산","필수코스","선호코스","액티비티선호유무","교통수단","post","res","gptResponse","courses","split","filter","line","trim","catch","error","console","handleSubmit","prompt","className","children","map","index","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","course","_c","$RefreshReg$"],"sources":["C:/Users/hsson/IdeaProjects/2024-2-CSC4004-6-Hotsix/frontend/src/components/ChatWindow.js"],"sourcesContent":["// src/components/ChatWindow.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport ChatInput from \"./ChatInput\";\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [contentSections, setContentSections] = useState([]);\r\n\r\n  // 메시지 추가 함수\r\n  const addMessage = (message, isUser, imageUrl = null) => {\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { text: message, isUser, imageUrl },\r\n    ]);\r\n  };\r\n\r\n  // 초기 로드 시 GPT API에 사용자 정보 전송\r\n  useEffect(() => {\r\n    const userId = sessionStorage.getItem(\"ID\");\r\n    if (userId) {\r\n      // 사용자 정보 가져오기\r\n      axios\r\n        .get(`/userNameAndUserProfile/${userId}`)\r\n        .then((response) => {\r\n          const userName = response.data.userName;\r\n          const userProfile = response.data.profileImagePath;\r\n\r\n          // 추가적으로 필요한 사용자 정보가 있다면 가져옵니다.\r\n          // 예: preferredCourse, transportType 등\r\n\r\n          // GPT API에 사용자 정보 전송\r\n          const userInfo = {\r\n            MBTI: \"ISFP\", // 실제 사용자 정보로 대체\r\n            사는곳: \"서울특별시 중구 퇴계로\", // 실제 사용자 정보로 대체\r\n            예산: \"10~20만원\", // 실제 사용자 정보로 대체\r\n            필수코스: \"카페, 영화\", // 실제 사용자 정보로 대체\r\n            선호코스: \"산책\", // 실제 사용자 정보로 대체\r\n            액티비티선호유무: \"비선호\", // 실제 사용자 정보로 대체\r\n            교통수단: \"대중교통\", // 실제 사용자 정보로 대체\r\n          };\r\n\r\n          axios\r\n            .post(\"http://localhost:8080/ask\", userInfo)\r\n            .then((res) => {\r\n              const gptResponse = res.data.text;\r\n              // 응답을 각 컨텐츠 섹션에 매핑\r\n              const courses = gptResponse.split(\"\\n\").filter(line => line.trim() !== \"\");\r\n              setContentSections(courses);\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error fetching GPT response:\", error);\r\n              addMessage(\"Error fetching response from server.\", false);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching user data:\", error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = async (message) => {\r\n    // 사용자 메시지를 추가\r\n    addMessage(message, true);\r\n\r\n    try {\r\n      // 백엔드 서버와 통신하여 GPT의 응답을 받음\r\n      const response = await axios.post(\"http://localhost:8080/ask\", {\r\n        prompt: message,\r\n      });\r\n\r\n      // GPT 응답 처리\r\n      if (response.data) {\r\n        const { text, imageUrl } = response.data; // text와 imageUrl을 백엔드에서 받아옴\r\n        addMessage(text, false, imageUrl); // 메시지와 이미지 추가\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching GPT response:\", error);\r\n      addMessage(\"Error fetching response from server.\", false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={index}\r\n            message={message.text}\r\n            isUser={message.isUser}\r\n            imageUrl={message.imageUrl} // 이미지 URL 전달\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <ChatInput onSubmit={handleSubmit} />\r\n\r\n      {/* 컨텐츠 섹션 표시 */}\r\n      <div className=\"content-sections\">\r\n        {contentSections.map((course, index) => (\r\n          <div key={index} className={`content-item content-${index + 1}`}>\r\n            {course}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMa,UAAU,GAAGA,CAACC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,GAAG,IAAI,KAAK;IACvDN,WAAW,CAAEO,YAAY,IAAK,CAC5B,GAAGA,YAAY,EACf;MAAEC,IAAI,EAAEJ,OAAO;MAAEC,MAAM;MAAEC;IAAS,CAAC,CACpC,CAAC;EACJ,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACd,MAAMkB,MAAM,GAAGC,cAAc,CAACC,OAAO,CAAC,IAAI,CAAC;IAC3C,IAAIF,MAAM,EAAE;MACV;MACAjB,KAAK,CACFoB,GAAG,CAAC,2BAA2BH,MAAM,EAAE,CAAC,CACxCI,IAAI,CAAEC,QAAQ,IAAK;QAClB,MAAMC,QAAQ,GAAGD,QAAQ,CAACE,IAAI,CAACD,QAAQ;QACvC,MAAME,WAAW,GAAGH,QAAQ,CAACE,IAAI,CAACE,gBAAgB;;QAElD;QACA;;QAEA;QACA,MAAMC,QAAQ,GAAG;UACfC,IAAI,EAAE,MAAM;UAAE;UACdC,GAAG,EAAE,cAAc;UAAE;UACrBC,EAAE,EAAE,SAAS;UAAE;UACfC,IAAI,EAAE,QAAQ;UAAE;UAChBC,IAAI,EAAE,IAAI;UAAE;UACZC,QAAQ,EAAE,KAAK;UAAE;UACjBC,IAAI,EAAE,MAAM,CAAE;QAChB,CAAC;QAEDlC,KAAK,CACFmC,IAAI,CAAC,2BAA2B,EAAER,QAAQ,CAAC,CAC3CN,IAAI,CAAEe,GAAG,IAAK;UACb,MAAMC,WAAW,GAAGD,GAAG,CAACZ,IAAI,CAACR,IAAI;UACjC;UACA,MAAMsB,OAAO,GAAGD,WAAW,CAACE,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC;UAC1EhC,kBAAkB,CAAC4B,OAAO,CAAC;QAC7B,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,IAAK;UAChBC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpDjC,UAAU,CAAC,sCAAsC,EAAE,KAAK,CAAC;QAC3D,CAAC,CAAC;MACN,CAAC,CAAC,CACDgC,KAAK,CAAEC,KAAK,IAAK;QAChBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD,CAAC,CAAC;IACN;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,YAAY,GAAG,MAAOlC,OAAO,IAAK;IACtC;IACAD,UAAU,CAACC,OAAO,EAAE,IAAI,CAAC;IAEzB,IAAI;MACF;MACA,MAAMU,QAAQ,GAAG,MAAMtB,KAAK,CAACmC,IAAI,CAAC,2BAA2B,EAAE;QAC7DY,MAAM,EAAEnC;MACV,CAAC,CAAC;;MAEF;MACA,IAAIU,QAAQ,CAACE,IAAI,EAAE;QACjB,MAAM;UAAER,IAAI;UAAEF;QAAS,CAAC,GAAGQ,QAAQ,CAACE,IAAI,CAAC,CAAC;QAC1Cb,UAAU,CAACK,IAAI,EAAE,KAAK,EAAEF,QAAQ,CAAC,CAAC,CAAC;MACrC;IACF,CAAC,CAAC,OAAO8B,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpDjC,UAAU,CAAC,sCAAsC,EAAE,KAAK,CAAC;IAC3D;EACF,CAAC;EAED,oBACEP,OAAA;IAAK4C,SAAS,EAAC,aAAa;IAAAC,QAAA,gBAC1B7C,OAAA;MAAK4C,SAAS,EAAC,eAAe;MAAAC,QAAA,EAC3B1C,QAAQ,CAAC2C,GAAG,CAAC,CAACtC,OAAO,EAAEuC,KAAK,kBAC3B/C,OAAA,CAACH,WAAW;QAEVW,OAAO,EAAEA,OAAO,CAACI,IAAK;QACtBH,MAAM,EAAED,OAAO,CAACC,MAAO;QACvBC,QAAQ,EAAEF,OAAO,CAACE,QAAS,CAAC;MAAA,GAHvBqC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnD,OAAA,CAACF,SAAS;MAACsD,QAAQ,EAAEV;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGrCnD,OAAA;MAAK4C,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BxC,eAAe,CAACyC,GAAG,CAAC,CAACO,MAAM,EAAEN,KAAK,kBACjC/C,OAAA;QAAiB4C,SAAS,EAAE,wBAAwBG,KAAK,GAAG,CAAC,EAAG;QAAAF,QAAA,EAC7DQ;MAAM,GADCN,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjD,EAAA,CAtGID,UAAU;AAAAqD,EAAA,GAAVrD,UAAU;AAwGhB,eAAeA,UAAU;AAAC,IAAAqD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
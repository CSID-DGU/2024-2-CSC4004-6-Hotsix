{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hsson\\\\IdeaProjects\\\\2024-2-CSC4004-6-Hotsix\\\\frontend\\\\src\\\\components\\\\ContentCarousel.js\",\n  _s = $RefreshSig$();\n// src/components/ContentCarousel.js\nimport React, { useRef, useEffect, useState } from \"react\";\nimport \"../styles/ContentCarousel.css\";\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ContentCarousel() {\n  _s();\n  const containerRefs = useRef([]);\n\n  // sections 상태 관리\n  const [sections, setSections] = useState([{\n    title: \"사용자 맞춤\",\n    items: []\n  }, {\n    title: \"기념일 기념\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `경궁 ${i + 1}`\n    }))\n  }, {\n    title: \"인기 장소\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `드라마 ${i + 1}`\n    }))\n  }, {\n    title: \"계절별\",\n    items: Array.from({\n      length: 10\n    }, (_, i) => ({\n      title: `애니 ${i + 1}`\n    }))\n  }]);\n\n  // 에러 및 로딩 상태 추가\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const fetchGptResponse = async () => {\n      // 실제 사용자 데이터로 대체하세요\n      const userInfo = {\n        mbti: 'ISFP',\n        location: '서울특별시 중구 퇴계로',\n        budget: '10~20만원',\n        requiredCourse: '카페, 영화',\n        preferredCourse: '산책',\n        activityPreference: '비선호',\n        transportType: '대중교통'\n      };\n      try {\n        const response = await axios.post('http://localhost:8080/ask', userInfo);\n        console.log('GPT 응답 원본:', response.data); // 디버깅용\n\n        // 응답 데이터 구조 확인\n        let responseText = '';\n        if (typeof response.data === 'object' && response.data.text) {\n          responseText = response.data.text;\n        } else if (typeof response.data === 'string') {\n          responseText = response.data;\n        } else {\n          console.error(\"응답 데이터 형식이 예상과 다릅니다:\", response.data);\n          setError(\"응답 데이터 형식이 올바르지 않습니다.\");\n          setLoading(false);\n          return;\n        }\n        console.log('GPT 응답 텍스트:', responseText); // 디버깅용\n\n        // GPT 응답 파싱 (줄바꿈으로 분리)\n        const contentItems = responseText.split('\\n').filter(item => item.trim() !== '').map(item => item.trim());\n        console.log('파싱된 GPT 응답:', contentItems); // 디버깅용\n\n        // sections 상태 업데이트\n        setSections(prevSections => {\n          const newSections = [...prevSections];\n          newSections[0] = {\n            ...newSections[0],\n            items: contentItems.map(item => ({\n              title: item\n            }))\n          };\n          return newSections;\n        });\n        setLoading(false); // 로딩 완료\n      } catch (error) {\n        console.error(\"GPT 응답 가져오는 중 오류 발생:\", error);\n        setError(\"GPT 응답 처리 중 오류가 발생했습니다.\");\n        setLoading(false);\n      }\n    };\n    fetchGptResponse();\n  }, []);\n\n  // 스크롤 이동량 설정\n  const scrollAmount = 200; // 예시로 한 번에 200px씩 이동\n\n  const scroll = (direction, index) => {\n    var _container$querySelec;\n    const container = containerRefs.current[index];\n    if (!container) return; // 컨테이너가 없을 경우 대비\n\n    const itemWidth = ((_container$querySelec = container.querySelector(\".carousel-item\")) === null || _container$querySelec === void 0 ? void 0 : _container$querySelec.offsetWidth) || 0;\n    const totalWidth = itemWidth * (sections[index].items.length || 0);\n    if (direction === 'left') {\n      container.scrollLeft -= scrollAmount; // 왼쪽으로 스크롤\n\n      // 처음에 도달하면 끝으로 돌아가도록 설정\n      if (container.scrollLeft < 0) {\n        container.scrollLeft = totalWidth - container.clientWidth; // 끝으로 이동\n      }\n    } else {\n      container.scrollLeft += scrollAmount; // 오른쪽으로 스크롤\n\n      // 끝에 도달하면 처음으로 돌아가도록 설정\n      if (container.scrollLeft >= totalWidth - container.clientWidth) {\n        container.scrollLeft = 0; // 처음으로 돌아감\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-message\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 19\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this), !loading && !error && sections.map((section, index) => /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"carousel-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"carousel-title\",\n        children: section.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"carousel-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"carousel-button prev\",\n          onClick: () => scroll(\"left\", index),\n          children: \"\\u2039\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"carousel-content\",\n          ref: el => containerRefs.current[index] = el,\n          children: section.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"carousel-item\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"content-number\",\n              children: item.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this)\n          }, itemIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"carousel-button next\",\n          onClick: () => scroll(\"right\", index),\n          children: \"\\u203A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(ContentCarousel, \"Xfi9YZu/z+P/ny3q98BQBkGwIY4=\");\n_c = ContentCarousel;\nexport default ContentCarousel;\nvar _c;\n$RefreshReg$(_c, \"ContentCarousel\");","map":{"version":3,"names":["React","useRef","useEffect","useState","axios","jsxDEV","_jsxDEV","ContentCarousel","_s","containerRefs","sections","setSections","title","items","Array","from","length","_","i","error","setError","loading","setLoading","fetchGptResponse","userInfo","mbti","location","budget","requiredCourse","preferredCourse","activityPreference","transportType","response","post","console","log","data","responseText","text","contentItems","split","filter","item","trim","map","prevSections","newSections","scrollAmount","scroll","direction","index","_container$querySelec","container","current","itemWidth","querySelector","offsetWidth","totalWidth","scrollLeft","clientWidth","Fragment","children","className","fileName","_jsxFileName","lineNumber","columnNumber","section","onClick","ref","el","itemIndex","_c","$RefreshReg$"],"sources":["C:/Users/hsson/IdeaProjects/2024-2-CSC4004-6-Hotsix/frontend/src/components/ContentCarousel.js"],"sourcesContent":["// src/components/ContentCarousel.js\r\nimport React, { useRef, useEffect, useState } from \"react\";\r\nimport \"../styles/ContentCarousel.css\";\r\nimport axios from 'axios';\r\n\r\nfunction ContentCarousel() {\r\n  const containerRefs = useRef([]);\r\n\r\n  // sections 상태 관리\r\n  const [sections, setSections] = useState([\r\n    { title: \"사용자 맞춤\", items: [] },\r\n    { title: \"기념일 기념\", items: Array.from({ length: 10 }, (_, i) => ({ title: `경궁 ${i + 1}` })) },\r\n    { title: \"인기 장소\", items: Array.from({ length: 10 }, (_, i) => ({ title: `드라마 ${i + 1}` })) },\r\n    { title: \"계절별\", items: Array.from({ length: 10 }, (_, i) => ({ title: `애니 ${i + 1}` })) },\r\n  ]);\r\n\r\n  // 에러 및 로딩 상태 추가\r\n  const [error, setError] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchGptResponse = async () => {\r\n      // 실제 사용자 데이터로 대체하세요\r\n      const userInfo = {\r\n        mbti: 'ISFP',\r\n        location: '서울특별시 중구 퇴계로',\r\n        budget: '10~20만원',\r\n        requiredCourse: '카페, 영화',\r\n        preferredCourse: '산책',\r\n        activityPreference: '비선호',\r\n        transportType: '대중교통',\r\n      };\r\n\r\n      try {\r\n        const response = await axios.post('http://localhost:8080/ask', userInfo);\r\n        console.log('GPT 응답 원본:', response.data); // 디버깅용\r\n\r\n        // 응답 데이터 구조 확인\r\n        let responseText = '';\r\n        if (typeof response.data === 'object' && response.data.text) {\r\n          responseText = response.data.text;\r\n        } else if (typeof response.data === 'string') {\r\n          responseText = response.data;\r\n        } else {\r\n          console.error(\"응답 데이터 형식이 예상과 다릅니다:\", response.data);\r\n          setError(\"응답 데이터 형식이 올바르지 않습니다.\");\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        console.log('GPT 응답 텍스트:', responseText); // 디버깅용\r\n\r\n        // GPT 응답 파싱 (줄바꿈으로 분리)\r\n        const contentItems = responseText.split('\\n').filter(item => item.trim() !== '').map(item => item.trim());\r\n        console.log('파싱된 GPT 응답:', contentItems); // 디버깅용\r\n\r\n        // sections 상태 업데이트\r\n        setSections(prevSections => {\r\n          const newSections = [...prevSections];\r\n          newSections[0] = {\r\n            ...newSections[0],\r\n            items: contentItems.map(item => ({ title: item })),\r\n          };\r\n          return newSections;\r\n        });\r\n        setLoading(false); // 로딩 완료\r\n      } catch (error) {\r\n        console.error(\"GPT 응답 가져오는 중 오류 발생:\", error);\r\n        setError(\"GPT 응답 처리 중 오류가 발생했습니다.\");\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchGptResponse();\r\n  }, []);\r\n\r\n  // 스크롤 이동량 설정\r\n  const scrollAmount = 200; // 예시로 한 번에 200px씩 이동\r\n\r\n  const scroll = (direction, index) => {\r\n    const container = containerRefs.current[index];\r\n    if (!container) return; // 컨테이너가 없을 경우 대비\r\n\r\n    const itemWidth = container.querySelector(\".carousel-item\")?.offsetWidth || 0;\r\n    const totalWidth = itemWidth * (sections[index].items.length || 0);\r\n\r\n    if (direction === 'left') {\r\n      container.scrollLeft -= scrollAmount; // 왼쪽으로 스크롤\r\n\r\n      // 처음에 도달하면 끝으로 돌아가도록 설정\r\n      if (container.scrollLeft < 0) {\r\n        container.scrollLeft = totalWidth - container.clientWidth; // 끝으로 이동\r\n      }\r\n    } else {\r\n      container.scrollLeft += scrollAmount; // 오른쪽으로 스크롤\r\n\r\n      // 끝에 도달하면 처음으로 돌아가도록 설정\r\n      if (container.scrollLeft >= totalWidth - container.clientWidth) {\r\n        container.scrollLeft = 0; // 처음으로 돌아감\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {loading && <div className=\"loading-message\">Loading...</div>}\r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      {!loading && !error && sections.map((section, index) => (\r\n        <section className=\"carousel-section\" key={index}>\r\n          <h2 className=\"carousel-title\">{section.title}</h2>\r\n          <div className=\"carousel-container\">\r\n            <button\r\n              className=\"carousel-button prev\"\r\n              onClick={() => scroll(\"left\", index)}\r\n            >\r\n              ‹\r\n            </button>\r\n            <div\r\n              className=\"carousel-content\"\r\n              ref={(el) => (containerRefs.current[index] = el)}\r\n            >\r\n              {section.items.map((item, itemIndex) => (\r\n                <div className=\"carousel-item\" key={itemIndex}>\r\n                  <div className=\"content-number\">{item.title}</div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <button\r\n              className=\"carousel-button next\"\r\n              onClick={() => scroll(\"right\", index)}\r\n            >\r\n              ›\r\n            </button>\r\n          </div>\r\n        </section>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default ContentCarousel;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,+BAA+B;AACtC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACzB,MAAMC,aAAa,GAAGR,MAAM,CAAC,EAAE,CAAC;;EAEhC;EACA,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,CACvC;IAAES,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC9B;IAAED,KAAK,EAAE,QAAQ;IAAEC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;MAAEN,KAAK,EAAE,MAAMM,CAAC,GAAG,CAAC;IAAG,CAAC,CAAC;EAAE,CAAC,EAC5F;IAAEN,KAAK,EAAE,OAAO;IAAEC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;MAAEN,KAAK,EAAE,OAAOM,CAAC,GAAG,CAAC;IAAG,CAAC,CAAC;EAAE,CAAC,EAC5F;IAAEN,KAAK,EAAE,KAAK;IAAEC,KAAK,EAAEC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,MAAM;MAAEN,KAAK,EAAE,MAAMM,CAAC,GAAG,CAAC;IAAG,CAAC,CAAC;EAAE,CAAC,CAC1F,CAAC;;EAEF;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMqB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC;MACA,MAAMC,QAAQ,GAAG;QACfC,IAAI,EAAE,MAAM;QACZC,QAAQ,EAAE,cAAc;QACxBC,MAAM,EAAE,SAAS;QACjBC,cAAc,EAAE,QAAQ;QACxBC,eAAe,EAAE,IAAI;QACrBC,kBAAkB,EAAE,KAAK;QACzBC,aAAa,EAAE;MACjB,CAAC;MAED,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAM5B,KAAK,CAAC6B,IAAI,CAAC,2BAA2B,EAAET,QAAQ,CAAC;QACxEU,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;;QAE1C;QACA,IAAIC,YAAY,GAAG,EAAE;QACrB,IAAI,OAAOL,QAAQ,CAACI,IAAI,KAAK,QAAQ,IAAIJ,QAAQ,CAACI,IAAI,CAACE,IAAI,EAAE;UAC3DD,YAAY,GAAGL,QAAQ,CAACI,IAAI,CAACE,IAAI;QACnC,CAAC,MAAM,IAAI,OAAON,QAAQ,CAACI,IAAI,KAAK,QAAQ,EAAE;UAC5CC,YAAY,GAAGL,QAAQ,CAACI,IAAI;QAC9B,CAAC,MAAM;UACLF,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEa,QAAQ,CAACI,IAAI,CAAC;UACpDhB,QAAQ,CAAC,uBAAuB,CAAC;UACjCE,UAAU,CAAC,KAAK,CAAC;UACjB;QACF;QAEAY,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEE,YAAY,CAAC,CAAC,CAAC;;QAE1C;QACA,MAAME,YAAY,GAAGF,YAAY,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAC,CAACC,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC;QACzGT,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEI,YAAY,CAAC,CAAC,CAAC;;QAE1C;QACA5B,WAAW,CAACkC,YAAY,IAAI;UAC1B,MAAMC,WAAW,GAAG,CAAC,GAAGD,YAAY,CAAC;UACrCC,WAAW,CAAC,CAAC,CAAC,GAAG;YACf,GAAGA,WAAW,CAAC,CAAC,CAAC;YACjBjC,KAAK,EAAE0B,YAAY,CAACK,GAAG,CAACF,IAAI,KAAK;cAAE9B,KAAK,EAAE8B;YAAK,CAAC,CAAC;UACnD,CAAC;UACD,OAAOI,WAAW;QACpB,CAAC,CAAC;QACFxB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;MACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACde,OAAO,CAACf,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,QAAQ,CAAC,yBAAyB,CAAC;QACnCE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMwB,YAAY,GAAG,GAAG,CAAC,CAAC;;EAE1B,MAAMC,MAAM,GAAGA,CAACC,SAAS,EAAEC,KAAK,KAAK;IAAA,IAAAC,qBAAA;IACnC,MAAMC,SAAS,GAAG3C,aAAa,CAAC4C,OAAO,CAACH,KAAK,CAAC;IAC9C,IAAI,CAACE,SAAS,EAAE,OAAO,CAAC;;IAExB,MAAME,SAAS,GAAG,EAAAH,qBAAA,GAAAC,SAAS,CAACG,aAAa,CAAC,gBAAgB,CAAC,cAAAJ,qBAAA,uBAAzCA,qBAAA,CAA2CK,WAAW,KAAI,CAAC;IAC7E,MAAMC,UAAU,GAAGH,SAAS,IAAI5C,QAAQ,CAACwC,KAAK,CAAC,CAACrC,KAAK,CAACG,MAAM,IAAI,CAAC,CAAC;IAElE,IAAIiC,SAAS,KAAK,MAAM,EAAE;MACxBG,SAAS,CAACM,UAAU,IAAIX,YAAY,CAAC,CAAC;;MAEtC;MACA,IAAIK,SAAS,CAACM,UAAU,GAAG,CAAC,EAAE;QAC5BN,SAAS,CAACM,UAAU,GAAGD,UAAU,GAAGL,SAAS,CAACO,WAAW,CAAC,CAAC;MAC7D;IACF,CAAC,MAAM;MACLP,SAAS,CAACM,UAAU,IAAIX,YAAY,CAAC,CAAC;;MAEtC;MACA,IAAIK,SAAS,CAACM,UAAU,IAAID,UAAU,GAAGL,SAAS,CAACO,WAAW,EAAE;QAC9DP,SAAS,CAACM,UAAU,GAAG,CAAC,CAAC,CAAC;MAC5B;IACF;EACF,CAAC;EAED,oBACEpD,OAAA,CAACN,KAAK,CAAC4D,QAAQ;IAAAC,QAAA,GACZxC,OAAO,iBAAIf,OAAA;MAAKwD,SAAS,EAAC,iBAAiB;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC5D/C,KAAK,iBAAIb,OAAA;MAAKwD,SAAS,EAAC,eAAe;MAAAD,QAAA,EAAE1C;IAAK;MAAA4C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,EACrD,CAAC7C,OAAO,IAAI,CAACF,KAAK,IAAIT,QAAQ,CAACkC,GAAG,CAAC,CAACuB,OAAO,EAAEjB,KAAK,kBACjD5C,OAAA;MAASwD,SAAS,EAAC,kBAAkB;MAAAD,QAAA,gBACnCvD,OAAA;QAAIwD,SAAS,EAAC,gBAAgB;QAAAD,QAAA,EAAEM,OAAO,CAACvD;MAAK;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACnD5D,OAAA;QAAKwD,SAAS,EAAC,oBAAoB;QAAAD,QAAA,gBACjCvD,OAAA;UACEwD,SAAS,EAAC,sBAAsB;UAChCM,OAAO,EAAEA,CAAA,KAAMpB,MAAM,CAAC,MAAM,EAAEE,KAAK,CAAE;UAAAW,QAAA,EACtC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACT5D,OAAA;UACEwD,SAAS,EAAC,kBAAkB;UAC5BO,GAAG,EAAGC,EAAE,IAAM7D,aAAa,CAAC4C,OAAO,CAACH,KAAK,CAAC,GAAGoB,EAAI;UAAAT,QAAA,EAEhDM,OAAO,CAACtD,KAAK,CAAC+B,GAAG,CAAC,CAACF,IAAI,EAAE6B,SAAS,kBACjCjE,OAAA;YAAKwD,SAAS,EAAC,eAAe;YAAAD,QAAA,eAC5BvD,OAAA;cAAKwD,SAAS,EAAC,gBAAgB;cAAAD,QAAA,EAAEnB,IAAI,CAAC9B;YAAK;cAAAmD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM;UAAC,GADhBK,SAAS;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAExC,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACN5D,OAAA;UACEwD,SAAS,EAAC,sBAAsB;UAChCM,OAAO,EAAEA,CAAA,KAAMpB,MAAM,CAAC,OAAO,EAAEE,KAAK,CAAE;UAAAW,QAAA,EACvC;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA,GAzBmChB,KAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OA0BvC,CACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAErB;AAAC1D,EAAA,CArIQD,eAAe;AAAAiE,EAAA,GAAfjE,eAAe;AAuIxB,eAAeA,eAAe;AAAC,IAAAiE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// src/components/ChatWindow.js\nimport React,{useState,useEffect}from\"react\";import axios from\"axios\";import ChatMessage from\"./ChatMessage.js\";import ChatInput from\"./ChatInput.js\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ChatWindow=()=>{const[messages,setMessages]=useState([]);const[contentSections,setContentSections]=useState([]);// 메시지 추가 함수\nconst addMessage=function(message,isUser){let imageUrl=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;setMessages(prevMessages=>[...prevMessages,{text:message,isUser,imageUrl}]);};// 초기 로드 시 GPT API에 사용자 정보 전송\nuseEffect(()=>{const userId=sessionStorage.getItem(\"ID\");if(userId){// 사용자 정보 가져오기\naxios.get(`/userNameAndUserProfile/${userId}`).then(response=>{const userName=response.data.userName;const userProfile=response.data.profileImagePath;// 추가적으로 필요한 사용자 정보가 있다면 가져옵니다.\n// 예: preferredCourse, transportType 등\n// GPT API에 사용자 정보 전송\nconst userInfo={MBTI:\"ISFP\",// 실제 사용자 정보로 대체\n사는곳:\"서울특별시 중구 퇴계로\",// 실제 사용자 정보로 대체\n예산:\"10~20만원\",// 실제 사용자 정보로 대체\n필수코스:\"카페, 영화\",// 실제 사용자 정보로 대체\n선호코스:\"산책\",// 실제 사용자 정보로 대체\n액티비티선호유무:\"비선호\",// 실제 사용자 정보로 대체\n교통수단:\"대중교통\"// 실제 사용자 정보로 대체\n};axios.post(\"http://localhost:8080/ask\",userInfo).then(res=>{const gptResponse=res.data.text;// 응답을 각 컨텐츠 섹션에 매핑\nconst courses=gptResponse.split(\"\\n\").filter(line=>line.trim()!==\"\");setContentSections(courses);}).catch(error=>{console.error(\"Error fetching GPT response:\",error);addMessage(\"Error fetching response from server.\",false);});}).catch(error=>{console.error(\"Error fetching user data:\",error);});}},[]);const handleSubmit=async message=>{// 사용자 메시지를 추가\naddMessage(message,true);try{// 백엔드 서버와 통신하여 GPT의 응답을 받음\nconst response=await axios.post(\"http://localhost:8080/ask\",{prompt:message});// GPT 응답 처리\nif(response.data){const{text,imageUrl}=response.data;// text와 imageUrl을 백엔드에서 받아옴\naddMessage(text,false,imageUrl);// 메시지와 이미지 추가\n}}catch(error){console.error(\"Error fetching GPT response:\",error);addMessage(\"Error fetching response from server.\",false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-window\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"chat-messages\",children:messages.map((message,index)=>/*#__PURE__*/_jsx(ChatMessage,{message:message.text,isUser:message.isUser,imageUrl:message.imageUrl// 이미지 URL 전달\n},index))}),/*#__PURE__*/_jsx(ChatInput,{onSubmit:handleSubmit}),/*#__PURE__*/_jsx(\"div\",{className:\"content-sections\",children:contentSections.map((course,index)=>/*#__PURE__*/_jsx(\"div\",{className:`content-item content-${index+1}`,children:course},index))})]});};export default ChatWindow;","map":{"version":3,"names":["React","useState","useEffect","axios","ChatMessage","ChatInput","jsx","_jsx","jsxs","_jsxs","ChatWindow","messages","setMessages","contentSections","setContentSections","addMessage","message","isUser","imageUrl","arguments","length","undefined","prevMessages","text","userId","sessionStorage","getItem","get","then","response","userName","data","userProfile","profileImagePath","userInfo","MBTI","사는곳","예산","필수코스","선호코스","액티비티선호유무","교통수단","post","res","gptResponse","courses","split","filter","line","trim","catch","error","console","handleSubmit","prompt","className","children","map","index","onSubmit","course"],"sources":["C:/Users/hsson/IdeaProjects/2024-2-CSC4004-6-Hotsix/frontend/src/components/ChatWindow.js"],"sourcesContent":["// src/components/ChatWindow.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport ChatMessage from \"./ChatMessage.js\";\r\nimport ChatInput from \"./ChatInput.js\";\r\n\r\nconst ChatWindow = () => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [contentSections, setContentSections] = useState([]);\r\n\r\n  // 메시지 추가 함수\r\n  const addMessage = (message, isUser, imageUrl = null) => {\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      { text: message, isUser, imageUrl },\r\n    ]);\r\n  };\r\n\r\n  // 초기 로드 시 GPT API에 사용자 정보 전송\r\n  useEffect(() => {\r\n    const userId = sessionStorage.getItem(\"ID\");\r\n    if (userId) {\r\n      // 사용자 정보 가져오기\r\n      axios\r\n        .get(`/userNameAndUserProfile/${userId}`)\r\n        .then((response) => {\r\n          const userName = response.data.userName;\r\n          const userProfile = response.data.profileImagePath;\r\n\r\n          // 추가적으로 필요한 사용자 정보가 있다면 가져옵니다.\r\n          // 예: preferredCourse, transportType 등\r\n\r\n          // GPT API에 사용자 정보 전송\r\n          const userInfo = {\r\n            MBTI: \"ISFP\", // 실제 사용자 정보로 대체\r\n            사는곳: \"서울특별시 중구 퇴계로\", // 실제 사용자 정보로 대체\r\n            예산: \"10~20만원\", // 실제 사용자 정보로 대체\r\n            필수코스: \"카페, 영화\", // 실제 사용자 정보로 대체\r\n            선호코스: \"산책\", // 실제 사용자 정보로 대체\r\n            액티비티선호유무: \"비선호\", // 실제 사용자 정보로 대체\r\n            교통수단: \"대중교통\", // 실제 사용자 정보로 대체\r\n          };\r\n\r\n          axios\r\n            .post(\"http://localhost:8080/ask\", userInfo)\r\n            .then((res) => {\r\n              const gptResponse = res.data.text;\r\n              // 응답을 각 컨텐츠 섹션에 매핑\r\n              const courses = gptResponse.split(\"\\n\").filter(line => line.trim() !== \"\");\r\n              setContentSections(courses);\r\n            })\r\n            .catch((error) => {\r\n              console.error(\"Error fetching GPT response:\", error);\r\n              addMessage(\"Error fetching response from server.\", false);\r\n            });\r\n        })\r\n        .catch((error) => {\r\n          console.error(\"Error fetching user data:\", error);\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  const handleSubmit = async (message) => {\r\n    // 사용자 메시지를 추가\r\n    addMessage(message, true);\r\n\r\n    try {\r\n      // 백엔드 서버와 통신하여 GPT의 응답을 받음\r\n      const response = await axios.post(\"http://localhost:8080/ask\", {\r\n        prompt: message,\r\n      });\r\n\r\n      // GPT 응답 처리\r\n      if (response.data) {\r\n        const { text, imageUrl } = response.data; // text와 imageUrl을 백엔드에서 받아옴\r\n        addMessage(text, false, imageUrl); // 메시지와 이미지 추가\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching GPT response:\", error);\r\n      addMessage(\"Error fetching response from server.\", false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-window\">\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage\r\n            key={index}\r\n            message={message.text}\r\n            isUser={message.isUser}\r\n            imageUrl={message.imageUrl} // 이미지 URL 전달\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <ChatInput onSubmit={handleSubmit} />\r\n\r\n      {/* 컨텐츠 섹션 표시 */}\r\n      <div className=\"content-sections\">\r\n        {contentSections.map((course, index) => (\r\n          <div key={index} className={`content-item content-${index + 1}`}>\r\n            {course}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
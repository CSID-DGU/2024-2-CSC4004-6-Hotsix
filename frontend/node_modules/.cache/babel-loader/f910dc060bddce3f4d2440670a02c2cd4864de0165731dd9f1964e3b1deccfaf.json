{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/Header.js\nimport '../styles/Header.css';\nimport useState from 'react';\nimport React from 'react';\nimport { useNavigate } from 'react-router-dom';\nfunction Header({\n  isLoggedIn,\n  setIsLoggedIn,\n  onHomeClick,\n  onCommunityClick,\n  onMyPageClick,\n  onLoginClick,\n  onSignupClick,\n  onSurveyClick,\n  onRecommendationCourseClick\n}) {\n  _s();\n  const fallbackImagePath = \"/asset/Images/altImage/alt.png\"; // 대체 이미지 경로\n  const navigate = useNavigate();\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\n  const [profileImagePath, setProfileImagePath] = React.useState(\"\");\n  // const [isLoggedIn, setIsLoggedIn] = React.useState(!!sessionStorage.getItem(\"ID\"));\n  // const navigate = useNavigate();\n\n  const id = sessionStorage.getItem(\"ID\");\n  // 로그인 상태 확인\n  React.useEffect(() => {\n    console.log(\"Session ID found:\", id);\n    setIsLoggedIn(!!id);\n  }, [window.location.pathname]); // URL 변경 시 상태 동기화\n\n  //유저 프로필 요청\n  React.useEffect(() => {\n    if (id) {\n      fetch(`/userProfile/${id}`, {\n        // API 요청\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n          // 필요시 Authorization 헤더 추가\n          // 'Authorization': `Bearer ${sessionStorage.getItem('token')}`\n        }\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Failed to fetch user data');\n        }\n        return response.json();\n      }).then(data => {\n        setProfileImagePath(data.profileImagePath); // 사용자 이름 설정\n      }).catch(error => {\n        console.error('Error fetching user data:', error);\n      });\n    }\n  }, [id]);\n  const toggleDropdown = () => {\n    setIsDropdownOpen(!isDropdownOpen);\n  };\n  const closeDropdown = event => {\n    if (!event.target.closest('.profile-icon') && isDropdownOpen) {\n      setIsDropdownOpen(false);\n    }\n  };\n  const handleLogout = () => {\n    sessionStorage.removeItem(\"token\");\n    sessionStorage.removeItem(\"ID\");\n    setIsLoggedIn(false);\n    onHomeClick();\n    navigate('/');\n  };\n  React.useEffect(() => {\n    document.addEventListener('click', closeDropdown);\n    return () => {\n      document.removeEventListener('click', closeDropdown);\n    };\n  }, [isDropdownOpen]);\n  return /*#__PURE__*/React.createElement('header', {\n    className: 'header'\n  }, /*#__PURE__*/React.createElement('div', {\n    className: 'left-group'\n  }, /*#__PURE__*/React.createElement('div', {\n    className: 'logo',\n    onClick: e => {\n      e.preventDefault();\n      onHomeClick();\n      navigate('/');\n    }\n  }, /*#__PURE__*/React.createElement('img', {\n    src: '/asset/Images/logo/로고.png',\n    alt: '어디갈래 로고'\n  })), /*#__PURE__*/React.createElement('nav', {\n    className: 'nav'\n  }, /*#__PURE__*/React.createElement('a', {\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onCommunityClick();\n      navigate('/community');\n    }\n  }, '커뮤니티'), isLoggedIn ?\n  //로그인 되어 있는 경우\n  [/*#__PURE__*/React.createElement('a', {\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onRecommendationCourseClick();\n      navigate('/recommendation-course');\n    }\n  }, '사용자 맞춤 코스 추천')\n  //              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); navigate('/bingo'); },},'빙고 게임')\n  ] :\n  //로그인 안되어 있는 경우\n  [/*#__PURE__*/React.createElement('a', {\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onRecommendationCourseClick();\n      navigate('/login');\n    }\n  }, '사용자 맞춤 코스 추천')\n  //              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); navigate('/login'); },},'빙고 게임')\n  ])), /*#__PURE__*/React.createElement('div', {\n    className: 'right-group'\n  },\n  //로그아웃 상태\n  !isLoggedIn ? [/*#__PURE__*/React.createElement('a', {\n    key: 'login',\n    // 고유한 key 추가\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onLoginClick();\n      navigate('/login');\n    },\n    className: 'auth-link'\n  }, '로그인'), /*#__PURE__*/React.createElement('a', {\n    key: 'signup',\n    // 고유한 key 추가\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onSignupClick();\n      navigate('/signup');\n    },\n    className: 'auth-link'\n  }, '회원가입')]\n\n  //로그인 상태\n  : [/*#__PURE__*/React.createElement('a', {\n    key: 'logout',\n    // 고유한 key 추가\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      handleLogout();\n    },\n    className: 'auth-link'\n  }, '로그아웃'), /*#__PURE__*/React.createElement('div', {\n    key: 'profile-icon',\n    // 고유한 key 추가\n    className: 'profile-icon',\n    onClick: toggleDropdown\n  }, /*#__PURE__*/React.createElement('img', {\n    key: 'profile-img',\n    // 고유한 key 추가\n    src: profileImagePath ? `/asset/Images/userProfile/` + profileImagePath : fallbackImagePath,\n    onError: e => {\n      e.target.src = fallbackImagePath;\n    },\n    // 이미지 로드 실패 시 대체 이미지로 변경\n    alt: 'No Image'\n  }), isDropdownOpen && /*#__PURE__*/React.createElement('div', {\n    className: 'dropdown-menu',\n    key: 'dropdown-menu'\n  },\n  /*#__PURE__*/\n  // 고유한 key 추가\n  React.createElement('a', {\n    key: 'mypage',\n    // 고유한 key 추가\n    href: '#',\n    onClick: e => {\n      e.preventDefault();\n      onMyPageClick();\n      navigate('/mypage');\n    }\n  }, '마이페이지'), /*#__PURE__*/React.createElement('a', {\n    key: 'settings',\n    // 고유한 key 추가\n    href: '#',\n    onClick: () => alert('설정 클릭됨')\n  }, '설정')))]));\n}\n_s(Header, \"DpgQgDTgo622DhxOVwRi4Ipx4hY=\", false, function () {\n  return [useNavigate];\n});\n_c = Header;\nexport default Header;\nvar _c;\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"names":["useState","React","useNavigate","Header","isLoggedIn","setIsLoggedIn","onHomeClick","onCommunityClick","onMyPageClick","onLoginClick","onSignupClick","onSurveyClick","onRecommendationCourseClick","_s","fallbackImagePath","navigate","isDropdownOpen","setIsDropdownOpen","profileImagePath","setProfileImagePath","id","sessionStorage","getItem","useEffect","console","log","window","location","pathname","fetch","method","headers","then","response","ok","Error","json","data","catch","error","toggleDropdown","closeDropdown","event","target","closest","handleLogout","removeItem","document","addEventListener","removeEventListener","createElement","className","onClick","e","preventDefault","src","alt","href","key","onError","alert","_c","$RefreshReg$"],"sources":["C:/Users/hsson/IdeaProjects/2024-2-CSC4004-6-Hotsix/frontend/src/components/Header.js"],"sourcesContent":["// src/components/Header.js\r\nimport '../styles/Header.css'; \r\nimport  useState  from 'react';\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n\r\nfunction Header({ isLoggedIn, setIsLoggedIn,onHomeClick, onCommunityClick, onMyPageClick, onLoginClick, onSignupClick, onSurveyClick,onRecommendationCourseClick }) {\r\n\r\n  const fallbackImagePath = \"/asset/Images/altImage/alt.png\"; // 대체 이미지 경로\r\n  const navigate = useNavigate();\r\n  const [isDropdownOpen, setIsDropdownOpen] = React.useState(false);\r\n  const [profileImagePath, setProfileImagePath] = React.useState(\"\");\r\n  // const [isLoggedIn, setIsLoggedIn] = React.useState(!!sessionStorage.getItem(\"ID\"));\r\n  // const navigate = useNavigate();\r\n\r\n  const id = sessionStorage.getItem(\"ID\");\r\n  // 로그인 상태 확인\r\n  React.useEffect(() => {\r\n    console.log(\"Session ID found:\", id);\r\n    setIsLoggedIn(!!id);\r\n  }, [window.location.pathname]); // URL 변경 시 상태 동기화\r\n\r\n  //유저 프로필 요청\r\n  React.useEffect(() => {\r\n      if(id){\r\n        fetch(`/userProfile/${id}`, { // API 요청\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // 필요시 Authorization 헤더 추가\r\n                // 'Authorization': `Bearer ${sessionStorage.getItem('token')}`\r\n            },\r\n    } )\r\n        .then(response => {\r\n            if (!response.ok) {\r\n                throw new Error('Failed to fetch user data');\r\n            }\r\n            return response.json();\r\n        })\r\n        .then(data => {\r\n            setProfileImagePath(data.profileImagePath); // 사용자 이름 설정\r\n        })\r\n        .catch(error => {\r\n            console.error('Error fetching user data:', error);\r\n        })\r\n      }\r\n    }, [id]);\r\n\r\n  const toggleDropdown = () => {\r\n    setIsDropdownOpen(!isDropdownOpen);\r\n  };\r\n\r\n\r\n  const closeDropdown = (event) => {\r\n    if (!event.target.closest('.profile-icon') && isDropdownOpen) {\r\n      setIsDropdownOpen(false);\r\n    }\r\n  };\r\n\r\n  const handleLogout = () => {\r\n    sessionStorage.removeItem(\"token\");\r\n    sessionStorage.removeItem(\"ID\");\r\n    setIsLoggedIn(false);\r\n    onHomeClick();\r\n    navigate('/');\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    document.addEventListener('click', closeDropdown);\r\n    return () => {\r\n      document.removeEventListener('click', closeDropdown);\r\n    };\r\n  }, [isDropdownOpen]);\r\n\r\n  return (\r\n    React.createElement('header', { className: 'header' },\r\n      React.createElement('div', { className: 'left-group' },\r\n        React.createElement('div', { className: 'logo', onClick: (e) => { e.preventDefault(); onHomeClick();  navigate('/'); } },\r\n          React.createElement('img', { src: '/asset/Images/logo/로고.png', alt: '어디갈래 로고' })\r\n        ),\r\n        React.createElement('nav', { className: 'nav' },\r\n          React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); onCommunityClick(); navigate('/community'); } }, '커뮤니티'),\r\n            isLoggedIn ?\r\n            //로그인 되어 있는 경우\r\n            [\r\n              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); onRecommendationCourseClick();navigate('/recommendation-course'); }}, '사용자 맞춤 코스 추천'),\r\n//              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); navigate('/bingo'); },},'빙고 게임')\r\n            ] : \r\n            //로그인 안되어 있는 경우\r\n            [\r\n              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); onRecommendationCourseClick();navigate('/login'); }}, '사용자 맞춤 코스 추천'),\r\n//              React.createElement('a', { href: '#', onClick: (e) => { e.preventDefault(); navigate('/login'); },},'빙고 게임')\r\n            ]\r\n        ),\r\n      ),\r\n      React.createElement('div', { className: 'right-group' },\r\n\r\n        //로그아웃 상태\r\n        !isLoggedIn ? [\r\n          React.createElement('a', {\r\n              key: 'login', // 고유한 key 추가\r\n              href: '#',\r\n              onClick: (e) => { e.preventDefault(); onLoginClick(); navigate('/login'); },\r\n              className: 'auth-link'\r\n          }, '로그인'),\r\n          React.createElement('a', {\r\n              key: 'signup', // 고유한 key 추가\r\n              href: '#',\r\n              onClick: (e) => { e.preventDefault();onSignupClick();  navigate('/signup'); },\r\n              className: 'auth-link'\r\n          }, '회원가입')\r\n        ] \r\n\r\n        //로그인 상태\r\n        : [\r\n          React.createElement('a', {\r\n              key: 'logout', // 고유한 key 추가\r\n              href: '#',\r\n              onClick: (e) => { e.preventDefault();\r\n              handleLogout();\r\n              },\r\n              className: 'auth-link'\r\n          }, '로그아웃'),\r\n          React.createElement('div', {\r\n              key: 'profile-icon', // 고유한 key 추가\r\n              className: 'profile-icon',\r\n              onClick: toggleDropdown\r\n          },\r\n          React.createElement('img', {\r\n              key: 'profile-img', // 고유한 key 추가\r\n              src: profileImagePath ? `/asset/Images/userProfile/` + profileImagePath : fallbackImagePath,\r\n              onError: (e) => { e.target.src = fallbackImagePath; }, // 이미지 로드 실패 시 대체 이미지로 변경\r\n              alt: 'No Image'\r\n          }),\r\n          isDropdownOpen &&\r\n          React.createElement('div', { className: 'dropdown-menu', key: 'dropdown-menu' }, // 고유한 key 추가\r\n              React.createElement('a', {\r\n                  key: 'mypage', // 고유한 key 추가\r\n                  href: '#',\r\n                  onClick: (e) => { e.preventDefault(); onMyPageClick(); navigate('/mypage');}\r\n                  },\r\n                  '마이페이지'),\r\n              React.createElement('a', {\r\n                  key: 'settings', // 고유한 key 추가\r\n                  href: '#',\r\n                  onClick: () => alert('설정 클릭됨')\r\n              },\r\n                  '설정')\r\n              )\r\n            )\r\n        ]\r\n        )\r\n    )\r\n    );\r\n  }\r\n  \r\n  export default Header;\r\n      "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}